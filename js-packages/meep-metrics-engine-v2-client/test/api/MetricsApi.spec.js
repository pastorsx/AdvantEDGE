/*
 * Copyright (c) 2019  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE Metrics Service REST API
 * Metrics Service provides metrics about the active scenario <p>**Micro-service**<br>[meep-metrics-engine](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-metrics-engine) <p>**Type & Usage**<br>Platform Service used by control/monitoring software and possibly by edge applications that require metrics <p>**Details**<br>API details available at _your-AdvantEDGE-ip-address:30000/api_ <p>**Default Port**<br>`30005`
 *
 * OpenAPI spec version: 1.0.0
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdvantEdgeMetricsServiceRestApi);
  }
}(this, function(expect, AdvantEdgeMetricsServiceRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdvantEdgeMetricsServiceRestApi.MetricsApi();
  });

  describe('(package)', function() {
    describe('MetricsApi', function() {
      describe('getEventMetrics', function() {
        it('should call getEventMetrics successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventMetrics call and complete the assertions
          /*
          var params = new AdvantEdgeMetricsServiceRestApi.EventQueryParams();
          params.tags = [new AdvantEdgeMetricsServiceRestApi.Tag()];
          params.tags[0].name = "src";
          params.tags[0].value = "iperf-ue1";
          params.fields = [new AdvantEdgeMetricsServiceRestApi.Field()];
          params.scope = new AdvantEdgeMetricsServiceRestApi.Scope();
          params.scope.limit = 60;
          params.scope.starTime = "2019-11-24T12:45:00-5:00";
          params.scope.stopTime = "2019-11-24T12:40:00-5:00";

          instance.getEventMetrics(params, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.EventQueryResponse);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("event metrics");
            {
              let dataCtr = data.columns;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Field);
              }
            }
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.EventValue);
                expect(data.time).to.be.a('string');
                expect(data.time).to.be("2019-11-24T12:45:00-5:00");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("Mobility event ue1 to poa3");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMetrics', function() {
        it('should call getNetworkMetrics successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMetrics call and complete the assertions
          /*
          var params = new AdvantEdgeMetricsServiceRestApi.NetworkQueryParams();
          params.tags = [new AdvantEdgeMetricsServiceRestApi.Tag()];
          params.tags[0].name = "src";
          params.tags[0].value = "iperf-ue1";
          params.fields = [new AdvantEdgeMetricsServiceRestApi.Field()];
          params.scope = new AdvantEdgeMetricsServiceRestApi.Scope();
          params.scope.limit = 60;
          params.scope.starTime = "2019-11-24T12:45:00-5:00";
          params.scope.stopTime = "2019-11-24T12:40:00-5:00";

          instance.getNetworkMetrics(params, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkQueryResponse);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("network metrics");
            {
              let dataCtr = data.columns;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Field);
              }
            }
            {
              let dataCtr = data.values;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkValue);
                expect(data.time).to.be.a('string');
                expect(data.time).to.be("2019-11-24T12:45:00-5:00");
                expect(data.lat).to.be.a('number');
                expect(data.lat).to.be(5.123);
                expect(data.tput).to.be.a('number');
                expect(data.tput).to.be(100000.0);
                expect(data.loss).to.be.a('number');
                expect(data.loss).to.be(0.003);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
