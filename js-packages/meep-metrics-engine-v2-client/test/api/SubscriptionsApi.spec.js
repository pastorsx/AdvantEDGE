/*
 * Copyright (c) 2019  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE Metrics Service REST API
 * Metrics Service provides metrics about the active scenario <p>**Micro-service**<br>[meep-metrics-engine](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-metrics-engine) <p>**Type & Usage**<br>Platform Service used by control/monitoring software and possibly by edge applications that require metrics <p>**Details**<br>API details available at _your-AdvantEDGE-ip-address:30000/api_ <p>**Default Port**<br>`30005`
 *
 * OpenAPI spec version: 1.0.0
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdvantEdgeMetricsServiceRestApi);
  }
}(this, function(expect, AdvantEdgeMetricsServiceRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdvantEdgeMetricsServiceRestApi.SubscriptionsApi();
  });

  describe('(package)', function() {
    describe('SubscriptionsApi', function() {
      describe('createEventsMetricsSubscription', function() {
        it('should call createEventsMetricsSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for createEventsMetricsSubscription call and complete the assertions
          /*
          var params = new AdvantEdgeMetricsServiceRestApi.EventSubscriptionParams();
          params.clientCorrelator = "83";
          params.callbackReference = new AdvantEdgeMetricsServiceRestApi.EventsCallbackReference();
          params.callbackReference.notifyURL = "http://clientApp.example.com/metric_event_notifications/123456";
          params.eventQueryParams = new AdvantEdgeMetricsServiceRestApi.EventQueryParams();
          params.eventQueryParams.tags = [new AdvantEdgeMetricsServiceRestApi.Tag()];
          params.eventQueryParams.tags[0].name = "src";
          params.eventQueryParams.tags[0].value = "iperf-ue1";
          params.eventQueryParams.fields = [new AdvantEdgeMetricsServiceRestApi.Field()];
          params.eventQueryParams.scope = new AdvantEdgeMetricsServiceRestApi.Scope();
          params.eventQueryParams.scope.limit = 60;
          params.eventQueryParams.scope.starTime = "2019-11-24T12:45:00-5:00";
          params.eventQueryParams.scope.stopTime = "2019-11-24T12:40:00-5:00";

          instance.createEventsMetricsSubscription(params, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.EventSubscriptionResponse);
            expect(data.subscriptionId).to.be.a('string');
            expect(data.subscriptionId).to.be("1.2556487E7");
            expect(data.clientCorrelator).to.be.a('string');
            expect(data.clientCorrelator).to.be("83");
            expect(data.callbackReference).to.be.a(AdvantEdgeMetricsServiceRestApi.EventsCallbackReference);
                  expect(data.callbackReference.notifyURL).to.be.a('string');
              expect(data.callbackReference.notifyURL).to.be("http://clientApp.example.com/metric_event_notifications/123456");
            expect(data.resourceURL).to.be.a('string');
            expect(data.resourceURL).to.be("http://localhost:8291/v1/subscriptions/events/subscription123");
            expect(data.eventQueryParams).to.be.a(AdvantEdgeMetricsServiceRestApi.EventQueryParams);
                  {
                let dataCtr = data.eventQueryParams.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Tag);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("src");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("iperf-ue1");
                }
              }
              {
                let dataCtr = data.eventQueryParams.fields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Field);
                }
              }
              expect(data.eventQueryParams.scope).to.be.a(AdvantEdgeMetricsServiceRestApi.Scope);
                    expect(data.eventQueryParams.scope.limit).to.be.a('number');
                expect(data.eventQueryParams.scope.limit).to.be(60);
                expect(data.eventQueryParams.scope.starTime).to.be.a('string');
                expect(data.eventQueryParams.scope.starTime).to.be("2019-11-24T12:45:00-5:00");
                expect(data.eventQueryParams.scope.stopTime).to.be.a('string');
                expect(data.eventQueryParams.scope.stopTime).to.be("2019-11-24T12:40:00-5:00");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNetworkMetricsSubscription', function() {
        it('should call createNetworkMetricsSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for createNetworkMetricsSubscription call and complete the assertions
          /*
          var params = new AdvantEdgeMetricsServiceRestApi.NetworkSubscriptionParams();
          params.clientCorrelator = "83";
          params.callbackReference = new AdvantEdgeMetricsServiceRestApi.NetworkCallbackReference();
          params.callbackReference.notifyURL = "http://clientApp.example.com/metric_network_notifications/123456";
          params.eventQueryParams = new AdvantEdgeMetricsServiceRestApi.EventQueryParams();
          params.eventQueryParams.tags = [new AdvantEdgeMetricsServiceRestApi.Tag()];
          params.eventQueryParams.tags[0].name = "src";
          params.eventQueryParams.tags[0].value = "iperf-ue1";
          params.eventQueryParams.fields = [new AdvantEdgeMetricsServiceRestApi.Field()];
          params.eventQueryParams.scope = new AdvantEdgeMetricsServiceRestApi.Scope();
          params.eventQueryParams.scope.limit = 60;
          params.eventQueryParams.scope.starTime = "2019-11-24T12:45:00-5:00";
          params.eventQueryParams.scope.stopTime = "2019-11-24T12:40:00-5:00";

          instance.createNetworkMetricsSubscription(params, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkSubscriptionResponse);
            expect(data.subscriptionId).to.be.a('string');
            expect(data.subscriptionId).to.be("1.2556487E7");
            expect(data.clientCorrelator).to.be.a('string');
            expect(data.clientCorrelator).to.be("83");
            expect(data.callbackReference).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkCallbackReference);
                  expect(data.callbackReference.notifyURL).to.be.a('string');
              expect(data.callbackReference.notifyURL).to.be("http://clientApp.example.com/metric_network_notifications/123456");
            expect(data.resourceURL).to.be.a('string');
            expect(data.resourceURL).to.be("http://localhost:8291/v1/subscriptions/network/subscription123");
            expect(data.eventQueryParams).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkQueryParams);
                  {
                let dataCtr = data.eventQueryParams.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Tag);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("src");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("iperf-ue1");
                }
              }
              {
                let dataCtr = data.eventQueryParams.fields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Field);
                }
              }
              expect(data.eventQueryParams.scope).to.be.a(AdvantEdgeMetricsServiceRestApi.Scope);
                    expect(data.eventQueryParams.scope.limit).to.be.a('number');
                expect(data.eventQueryParams.scope.limit).to.be(60);
                expect(data.eventQueryParams.scope.starTime).to.be.a('string');
                expect(data.eventQueryParams.scope.starTime).to.be("2019-11-24T12:45:00-5:00");
                expect(data.eventQueryParams.scope.stopTime).to.be.a('string');
                expect(data.eventQueryParams.scope.stopTime).to.be("2019-11-24T12:40:00-5:00");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteEventMetricSubscriptionById', function() {
        it('should call deleteEventMetricSubscriptionById successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteEventMetricSubscriptionById call
          /*
          var subscriptionId = "subscriptionId_example";

          instance.deleteEventMetricSubscriptionById(subscriptionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNetworkMetricSubscriptionById', function() {
        it('should call deleteNetworkMetricSubscriptionById successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNetworkMetricSubscriptionById call
          /*
          var subscriptionId = "subscriptionId_example";

          instance.deleteNetworkMetricSubscriptionById(subscriptionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventMetricSubscription', function() {
        it('should call getEventMetricSubscription successfully', function(done) {
          // TODO: uncomment getEventMetricSubscription call and complete the assertions
          /*

          instance.getEventMetricSubscription(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.EventSubscriptionResponseList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventMetricSubscriptionById', function() {
        it('should call getEventMetricSubscriptionById successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventMetricSubscriptionById call and complete the assertions
          /*
          var subscriptionId = "subscriptionId_example";

          instance.getEventMetricSubscriptionById(subscriptionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.EventSubscriptionResponse);
            expect(data.subscriptionId).to.be.a('string');
            expect(data.subscriptionId).to.be("1.2556487E7");
            expect(data.clientCorrelator).to.be.a('string');
            expect(data.clientCorrelator).to.be("83");
            expect(data.callbackReference).to.be.a(AdvantEdgeMetricsServiceRestApi.EventsCallbackReference);
                  expect(data.callbackReference.notifyURL).to.be.a('string');
              expect(data.callbackReference.notifyURL).to.be("http://clientApp.example.com/metric_event_notifications/123456");
            expect(data.resourceURL).to.be.a('string');
            expect(data.resourceURL).to.be("http://localhost:8291/v1/subscriptions/events/subscription123");
            expect(data.eventQueryParams).to.be.a(AdvantEdgeMetricsServiceRestApi.EventQueryParams);
                  {
                let dataCtr = data.eventQueryParams.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Tag);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("src");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("iperf-ue1");
                }
              }
              {
                let dataCtr = data.eventQueryParams.fields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Field);
                }
              }
              expect(data.eventQueryParams.scope).to.be.a(AdvantEdgeMetricsServiceRestApi.Scope);
                    expect(data.eventQueryParams.scope.limit).to.be.a('number');
                expect(data.eventQueryParams.scope.limit).to.be(60);
                expect(data.eventQueryParams.scope.starTime).to.be.a('string');
                expect(data.eventQueryParams.scope.starTime).to.be("2019-11-24T12:45:00-5:00");
                expect(data.eventQueryParams.scope.stopTime).to.be.a('string');
                expect(data.eventQueryParams.scope.stopTime).to.be("2019-11-24T12:40:00-5:00");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMetricSubscription', function() {
        it('should call getNetworkMetricSubscription successfully', function(done) {
          // TODO: uncomment getNetworkMetricSubscription call and complete the assertions
          /*

          instance.getNetworkMetricSubscription(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkSubscriptionResponseList);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNetworkMetricSubscriptionById', function() {
        it('should call getNetworkMetricSubscriptionById successfully', function(done) {
          // TODO: uncomment, update parameter values for getNetworkMetricSubscriptionById call and complete the assertions
          /*
          var subscriptionId = "subscriptionId_example";

          instance.getNetworkMetricSubscriptionById(subscriptionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkSubscriptionResponse);
            expect(data.subscriptionId).to.be.a('string');
            expect(data.subscriptionId).to.be("1.2556487E7");
            expect(data.clientCorrelator).to.be.a('string');
            expect(data.clientCorrelator).to.be("83");
            expect(data.callbackReference).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkCallbackReference);
                  expect(data.callbackReference.notifyURL).to.be.a('string');
              expect(data.callbackReference.notifyURL).to.be("http://clientApp.example.com/metric_network_notifications/123456");
            expect(data.resourceURL).to.be.a('string');
            expect(data.resourceURL).to.be("http://localhost:8291/v1/subscriptions/network/subscription123");
            expect(data.eventQueryParams).to.be.a(AdvantEdgeMetricsServiceRestApi.NetworkQueryParams);
                  {
                let dataCtr = data.eventQueryParams.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Tag);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("src");
                  expect(data.value).to.be.a('string');
                  expect(data.value).to.be("iperf-ue1");
                }
              }
              {
                let dataCtr = data.eventQueryParams.fields;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(AdvantEdgeMetricsServiceRestApi.Field);
                }
              }
              expect(data.eventQueryParams.scope).to.be.a(AdvantEdgeMetricsServiceRestApi.Scope);
                    expect(data.eventQueryParams.scope.limit).to.be.a('number');
                expect(data.eventQueryParams.scope.limit).to.be(60);
                expect(data.eventQueryParams.scope.starTime).to.be.a('string');
                expect(data.eventQueryParams.scope.starTime).to.be("2019-11-24T12:45:00-5:00");
                expect(data.eventQueryParams.scope.stopTime).to.be.a('string');
                expect(data.eventQueryParams.scope.stopTime).to.be("2019-11-24T12:40:00-5:00");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
