/*
 * Copyright (c) 2019  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE Metrics Service REST API
 * Metrics Service provides metrics about the active scenario <p>**Micro-service**<br>[meep-metrics-engine](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-metrics-engine) <p>**Type & Usage**<br>Platform Service used by control/monitoring software and possibly by edge applications that require metrics <p>**Details**<br>API details available at _your-AdvantEDGE-ip-address:30000/api_ <p>**Default Port**<br>`30005`
 *
 * OpenAPI spec version: 1.0.0
 * Contact: AdvantEDGE@InterDigital.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EventSubscriptionParams', 'model/EventSubscriptionResponse', 'model/EventSubscriptionResponseList', 'model/NetworkSubscriptionParams', 'model/NetworkSubscriptionResponse', 'model/NetworkSubscriptionResponseList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EventSubscriptionParams'), require('../model/EventSubscriptionResponse'), require('../model/EventSubscriptionResponseList'), require('../model/NetworkSubscriptionParams'), require('../model/NetworkSubscriptionResponse'), require('../model/NetworkSubscriptionResponseList'));
  } else {
    // Browser globals (root is window)
    if (!root.AdvantEdgeMetricsServiceRestApi) {
      root.AdvantEdgeMetricsServiceRestApi = {};
    }
    root.AdvantEdgeMetricsServiceRestApi.SubscriptionsApi = factory(root.AdvantEdgeMetricsServiceRestApi.ApiClient, root.AdvantEdgeMetricsServiceRestApi.EventSubscriptionParams, root.AdvantEdgeMetricsServiceRestApi.EventSubscriptionResponse, root.AdvantEdgeMetricsServiceRestApi.EventSubscriptionResponseList, root.AdvantEdgeMetricsServiceRestApi.NetworkSubscriptionParams, root.AdvantEdgeMetricsServiceRestApi.NetworkSubscriptionResponse, root.AdvantEdgeMetricsServiceRestApi.NetworkSubscriptionResponseList);
  }
}(this, function(ApiClient, EventSubscriptionParams, EventSubscriptionResponse, EventSubscriptionResponseList, NetworkSubscriptionParams, NetworkSubscriptionResponse, NetworkSubscriptionResponseList) {
  'use strict';

  /**
   * Subscriptions service.
   * @module api/SubscriptionsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SubscriptionsApi. 
   * @alias module:api/SubscriptionsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createEventsMetricsSubscription operation.
     * @callback module:api/SubscriptionsApi~createEventsMetricsSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Event Metric subscription
     * @param {module:model/EventSubscriptionParams} params Event subscription parameters
     * @param {module:api/SubscriptionsApi~createEventsMetricsSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionResponse}
     */
    this.createEventsMetricsSubscription = function(params, callback) {
      var postBody = params;

      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling createEventsMetricsSubscription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventSubscriptionResponse;

      return this.apiClient.callApi(
        '/subscriptions/event', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkMetricsSubscription operation.
     * @callback module:api/SubscriptionsApi~createNetworkMetricsSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Network Metric subscription
     * @param {module:model/NetworkSubscriptionParams} params Network subscription parameters
     * @param {module:api/SubscriptionsApi~createNetworkMetricsSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubscriptionResponse}
     */
    this.createNetworkMetricsSubscription = function(params, callback) {
      var postBody = params;

      // verify the required parameter 'params' is set
      if (params === undefined || params === null) {
        throw new Error("Missing the required parameter 'params' when calling createNetworkMetricsSubscription");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubscriptionResponse;

      return this.apiClient.callApi(
        '/subscriptions/network', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEventMetricSubscriptionById operation.
     * @callback module:api/SubscriptionsApi~deleteEventMetricSubscriptionByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an Event Metric subscription
     * @param {String} subscriptionId Subscription ID - returned when the subscription was created
     * @param {module:api/SubscriptionsApi~deleteEventMetricSubscriptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEventMetricSubscriptionById = function(subscriptionId, callback) {
      var postBody = null;

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deleteEventMetricSubscriptionById");
      }


      var pathParams = {
        'subscriptionId': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subscriptions/event/{subscriptionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkMetricSubscriptionById operation.
     * @callback module:api/SubscriptionsApi~deleteNetworkMetricSubscriptionByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Network Metric subscription
     * @param {String} subscriptionId Subscription ID - returned when the subscription was created
     * @param {module:api/SubscriptionsApi~deleteNetworkMetricSubscriptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNetworkMetricSubscriptionById = function(subscriptionId, callback) {
      var postBody = null;

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deleteNetworkMetricSubscriptionById");
      }


      var pathParams = {
        'subscriptionId': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/subscriptions/network/{subscriptionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMetricSubscription operation.
     * @callback module:api/SubscriptionsApi~getEventMetricSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Event Metric subscriptions
     * @param {module:api/SubscriptionsApi~getEventMetricSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionResponseList}
     */
    this.getEventMetricSubscription = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventSubscriptionResponseList;

      return this.apiClient.callApi(
        '/subscriptions/event', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventMetricSubscriptionById operation.
     * @callback module:api/SubscriptionsApi~getEventMetricSubscriptionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an Event Metric subscription
     * @param {String} subscriptionId Subscription ID - returned when the subscription was created
     * @param {module:api/SubscriptionsApi~getEventMetricSubscriptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionResponse}
     */
    this.getEventMetricSubscriptionById = function(subscriptionId, callback) {
      var postBody = null;

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getEventMetricSubscriptionById");
      }


      var pathParams = {
        'subscriptionId': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventSubscriptionResponse;

      return this.apiClient.callApi(
        '/subscriptions/event/{subscriptionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMetricSubscription operation.
     * @callback module:api/SubscriptionsApi~getNetworkMetricSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubscriptionResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Network Metric subscriptions
     * @param {module:api/SubscriptionsApi~getNetworkMetricSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubscriptionResponseList}
     */
    this.getNetworkMetricSubscription = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubscriptionResponseList;

      return this.apiClient.callApi(
        '/subscriptions/network', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkMetricSubscriptionById operation.
     * @callback module:api/SubscriptionsApi~getNetworkMetricSubscriptionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSubscriptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Network Metric subscription
     * @param {String} subscriptionId Subscription ID - returned when the subscription was created
     * @param {module:api/SubscriptionsApi~getNetworkMetricSubscriptionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSubscriptionResponse}
     */
    this.getNetworkMetricSubscriptionById = function(subscriptionId, callback) {
      var postBody = null;

      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getNetworkMetricSubscriptionById");
      }


      var pathParams = {
        'subscriptionId': subscriptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkSubscriptionResponse;

      return this.apiClient.callApi(
        '/subscriptions/network/{subscriptionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
